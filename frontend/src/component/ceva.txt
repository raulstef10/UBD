(defstruct shop 
      (cod  NIL)
      (denumire NIL) 
      (price NIL)
      (quantity NIL))
(SETF s (MAKE-ARRAY
 1 :element-type 'shop)) 
(DEFUN citire(shop)
        (SETF (shop-cod shop)
(READ)) 
        (SETF (shop-denumire shop)
(READ)) 
        (SETF (shop-price shop)
(READ))
        (SETF (shop-quantity shop)
(READ))) 
(DEFUN afisare(shop) 
   (TERPRI)
      (princ "Price under 20 ")
      (IF (< shop-price 20)
      (PRINT (shop-cod shop)) 
      (PRINT (shop-denumire shop))
      (PRINT (shop-price shop)) 
      (PRINT (shop-quantity shop))))
 (DEFUN init-vect-shop (vector) 
         (DO (( i 0 (+ i 1))
         (n (LENGTH vector)))
          ((= i n)) 
          (SETF (AREF vector i)
 (MAKE-shop)))) 
(DEFUN act-vect-shop(vector) 
        (DO ( (i 0 (+ i 1)) 
        (n (LENGTH vector)))
        ((= i n )) 
  (citire (AREF vector i))))
 (DEFUN afis-vect-shop(vector) 
      (DO ( ( i 0 (+ i 1)) 
      (n (LENGTH vector)))
      ((= i n)) 
  (afisare (AREF vector i))))
 (init-vect-shop s)
 (act-vect-shop s)
 (afis-vect-shop s)
(SETF s (MAKE-ARRAY 2 :element-type 'shop))
(DEFUN citire(shop)
    (SETF (shop-cod shop)(READ))
     (SETF (shop-denumire shop)(READ))
     (SETF (shop-price shop)(READ))
     (SETF (shop-quantity shop)(READ)))
(DEFUN afisare(shop)
(TERPRI)
   (princ "Price under 20 ")
  ( IF ( < (shop-price shop) 20)
   (PRINT (shop-cod shop))
    )
    ( IF ( < (shop-price shop) 20)
    (PRINT (shop-denumire shop))
          )
     ( IF ( < (shop-price shop) 20)
    (PRINT (shop-price shop))
          )
      ( IF ( < (shop-price shop) 20)
       (PRINT (shop-quantity shop))
           ))
(DEFUN init-vect-shop (vector)
    (DO (( i 0 (+ i 1))
         (n (LENGTH vector)))
           (   (= i n))
        (SETF (AREF vector i) (MAKE-shop))))
(DEFUN act-vect-shop(vector)
    (DO ( (i 0 (+ i 1))
         (n (LENGTH vector)))
        (   (= i n))
      (citire (AREF vector i))))
(DEFUN afis-vect-shop(vector)  
     DO ( ( i 0 (+ i 1))
         (n (LENGTH vector)))
        (   (= i n))
         (afisare (AREF vector i))))
(defun total (list &optional (sum 0) (n 0))
(cond ((null list) (* sum n))
     (t (total (cdr list)
           (+ sum (car list))
           (+ n 1)))))
(print (total '( 10 10 10 7 )))
(DEFUN afis-vect-shop(vector)
    (DO ( ( i 0 (+ i 1))
         (n (LENGTH vector)))
        (
(= i n))
        (afisare (AREF vector i))))
(init-vect-shop s)
(act-vect-shop s)
(afis-vect-shop s)
